/* _mixin_library.less v1.8.0 | MIT License | github.com/randallbruder/_s_starter */

/* LESS Mixins
	========================================================================== */

/**
 * @font-face LESS Mixin
 * use: .font-face(
 *   @font-family, // name
 *   @file-path,   // absolute/relative URL to font files, including filename without extension
 *   @font-weight, // light/normal/bold/inherit | 300/400/700
 *   @font-style   // italic/normal/inherit
 * )
 */
.font-face(@font-family; @file-path; @font-weight:normal; @font-style:normal) {
	@font-face {
		font-family: @font-family;
		src: url('@{file-path}.woff2') format('woff2'),
			 url('@{file-path}.woff') format('woff');
		font-weight: @font-weight;
		font-style: @font-style;
	}
}

/**
 * font LESS Mixin
 * use: .font(
 *   @font-family, // name
 *   @file-size,   // any unit/inherit
 *   @font-weight, // light/normal/bold/inherit | 300/400/700
 *   @font-style   // italic/normal/inherit
 * )
 */
.font(@font-family; @font-size:inherit; @font-weight:normal; @font-style:normal){
	font-family: @font-family;
	font-size: @font-size;
	font-weight: @font-weight;
	font-style: @font-style;
}

/**
 * font size mixin
 * @link: https://github.com/WordPress/gutenberg/issues/11043#issuecomment-458890194
 * Rather than a hacky workaround to try and set the :root/html font-size to 62.5%,
 * just rely on a 100% and use this mixin to calculate rem values.
 */
.font-size(@sizeValue:18) {
	@remValue: (unit(@sizeValue)/16);
	font-size: unit(unit(@sizeValue), px);
	font-size: unit(@remValue, rem);
}
 
/**
 * Mixins for targeting specific class(es) on the <body> or <html> tags
 * When using, don't include quotes around the class
 */
.body(@class; @rules) {
	body.@{class} & { @rules(); }
}

.body(@class; @class2; @rules) {
	body.@{class} & { @rules(); }
	body.@{class2} & { @rules(); }
}

.body(@class; @class2; @class3; @rules) {
	body.@{class} & { @rules(); }
	body.@{class2} & { @rules(); }
	body.@{class3} & { @rules(); }
}

.html(@class; @rules) {
	html.@{class} & { @rules(); }
}

.html(@class; @class2; @rules) {
	html.@{class} & { @rules(); }
	html.@{class2} & { @rules(); }
}

.html(@class; @class2; @class3; @rules) {
	html.@{class} & { @rules(); }
	html.@{class2} & { @rules(); }
	html.@{class3} & { @rules(); }
}

/**
 * Mixin for removing scrollbar from an element
 */
.no-scrollbar() {
	scrollbar-width: none; /* Firefox */
	-ms-overflow-style: none; /* IE 10+ */
	&::-webkit-scrollbar {
		width: 0px;
		background: transparent; /* Chrome/Safari/Webkit */
	}
}

/**
 * Mixins to pair with the "better viewport units" JavaScript code
 * Includes fallback for browsers that do not support Custom Properties
 * @link https://css-tricks.com/the-trick-to-viewport-units-on-mobile
 * @link https://destroytoday.com/blog/100vw-and-the-horizontal-overflow-you-probably-didnt-know-about
 */

.vh(@property:height; @vh:100) {
	@{property}: ~"@{vh}vh";
	@{property}: ~"calc(var(--vh, 1vh) * @{vh})";
}

.vw(@property:width; @vw:100) {
	@{property}: ~"@{vw}vw";
	@{property}: ~"calc(var(--vw, 1vw) * @{vw})";
}

/**
 * Smart watch specific styles
 * @link https://yesviz.com/devices/apple-watch-series-4-44mm/
 */
.watch(@rules) {
	@media only screen (max-width: 319px) {
		@rules();
	}
}

/**
 * Mobile specific styles
 */
.mobile(@rules) {
	@media (max-width: @max-width-mobile) {
		@rules();
	}
}

/**
 * Tablet specific styles
 */
.tablet(@rules) {
	@media (max-width: @max-width-tablet) {
		@rules();
	}
}

/**
 * Print specific styles
 */
.print(@rules) {
	@media print {
		@rules();
	}
}

/**
 * Editor specific styles. This mixin will output nothing in the main css file,
 * but an override of this mixin in the editor.less file does output the rules
 */
.editor(@rules) {
}

/**
 * Media query for system dark mode
 */
.darkmode(@rules) {
	@media (prefers-color-scheme: dark) {
		@rules();
	}
}
// Alternate spellings because I'm a dumbass and keep forgetting what I named this mixin
.dark-mode(@rules)  { .darkmode(@rules); }
.nightmode(@rules)  { .darkmode(@rules); }
.night-mode(@rules) { .darkmode(@rules); }

/**
 * Media query for users with the reduced motion accessibility setting enabled
 */
.reducedmotion(@rules) {
	@media (prefers-reduced-motion: reduce) {
		@rules();
	}
}

/**
 * Media query for users with the reduced transparency accessibility setting enabled
 */
.reducedtransparency(@rules) {
	@media (prefers-reduced-transparency: reduce) {
		@rules();
	}
}

/**
 * Media query for users with the inverted colors accessibility option is enabled
 */
.invertedcolors(@rules) {
	@media (inverted-colors: inverted) {
		@rules();
	}
}

/**
 * Mixin for hiding a certain element on WordPress if the user isn't logged in (useful for development testing.)
 */
.logged-in() {
	display: none;
	.body(logged-in; {
		display: block;
	});
}

/**
 * Hides an element from the page, but keeps it accessible for screen readers
 * @link: https://kittygiraudel.com/2021/02/17/hiding-content-responsibly/#the-sr-only-class
 */
#sr-only {
	border: 0 !important;
	clip: rect(1px, 1px, 1px, 1px) !important;
	-webkit-clip-path: inset(50%) !important;
	clip-path: inset(50%) !important;
	height: 1px !important;
	overflow: hidden !important;
	padding: 0 !important;
	position: absolute !important;
	width: 1px !important;
	white-space: nowrap !important;
}

/**
 * Specify the dimensions of an object more easily.
 * @link: http://getpreboot.com/#mixins-sizing
 */
 
.size(@width, @height) {
	width: @width;
	height: @height;
}

.square(@size) {
	.size(@size, @size);
}

/**
 * Easily truncate text with an ellipsis with a single mixin. Requires element to be block or inline-block level.
 * @link: http://getpreboot.com/#mixins-truncating
 */

.text-truncate() {
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}

/**
 * Conditional Property
 * @link: https://www.ishadeed.com/article/conditional-border-radius
 */

.conditionalProp(@property; @lessThanViewportWidth; @equalsViewportWidth; @tolerance: 4px) {
	@{property}: max(@equalsViewportWidth, min(@lessThanViewportWidth, calc((100vw - @tolerance - 100%) * 9999)));
	@{property}: max(@equalsViewportWidth, min(@lessThanViewportWidth, calc(((var(--vw, 1vw) * 100) - @tolerance - 100%) * 9999)));
}